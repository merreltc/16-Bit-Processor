////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Step1.vf
// /___/   /\     Timestamp : 02/07/2017 12:11:09
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3e -verilog "C:/Users/smithlb/Documents/CSSE232/New folder/ProcessorIntegrationStep1/Step1.vf" -w "C:/Users/smithlb/Documents/CSSE232/New folder/ProcessorIntegrationStep1/Step1.sch"
//Design Name: Step1
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module FD16CE_MXILINX_Step1(C, 
                            CE, 
                            CLR, 
                            D, 
                            Q);

    input C;
    input CE;
    input CLR;
    input [15:0] D;
   output [15:0] Q;
   
   
   FDCE #( .INIT(1'b0) ) I_Q0 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[0]), 
              .Q(Q[0]));
   FDCE #( .INIT(1'b0) ) I_Q1 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[1]), 
              .Q(Q[1]));
   FDCE #( .INIT(1'b0) ) I_Q2 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[2]), 
              .Q(Q[2]));
   FDCE #( .INIT(1'b0) ) I_Q3 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[3]), 
              .Q(Q[3]));
   FDCE #( .INIT(1'b0) ) I_Q4 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[4]), 
              .Q(Q[4]));
   FDCE #( .INIT(1'b0) ) I_Q5 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[5]), 
              .Q(Q[5]));
   FDCE #( .INIT(1'b0) ) I_Q6 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[6]), 
              .Q(Q[6]));
   FDCE #( .INIT(1'b0) ) I_Q7 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[7]), 
              .Q(Q[7]));
   FDCE #( .INIT(1'b0) ) I_Q8 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[8]), 
              .Q(Q[8]));
   FDCE #( .INIT(1'b0) ) I_Q9 (.C(C), 
              .CE(CE), 
              .CLR(CLR), 
              .D(D[9]), 
              .Q(Q[9]));
   FDCE #( .INIT(1'b0) ) I_Q10 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[10]), 
               .Q(Q[10]));
   FDCE #( .INIT(1'b0) ) I_Q11 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[11]), 
               .Q(Q[11]));
   FDCE #( .INIT(1'b0) ) I_Q12 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[12]), 
               .Q(Q[12]));
   FDCE #( .INIT(1'b0) ) I_Q13 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[13]), 
               .Q(Q[13]));
   FDCE #( .INIT(1'b0) ) I_Q14 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[14]), 
               .Q(Q[14]));
   FDCE #( .INIT(1'b0) ) I_Q15 (.C(C), 
               .CE(CE), 
               .CLR(CLR), 
               .D(D[15]), 
               .Q(Q[15]));
endmodule
`timescale 1ns / 1ps

module reg16_MUSER_Step1(CLK, 
                         I, 
                         Write, 
                         O);

    input CLK;
    input [15:0] I;
    input Write;
   output [15:0] O;
   
   wire XLXN_1;
   
   (* HU_SET = "XLXI_2_0" *) 
   FD16CE_MXILINX_Step1  XLXI_2 (.C(CLK), 
                                .CE(Write), 
                                .CLR(XLXN_1), 
                                .D(I[15:0]), 
                                .Q(O[15:0]));
   GND  XLXI_3 (.G(XLXN_1));
endmodule
`timescale 1ns / 1ps

module memory_MUSER_Step1(addr, 
                          clk, 
                          din, 
                          reset, 
                          wea, 
                          ALUSrc, 
                          Branch, 
                          douta, 
                          MemRead, 
                          MemtoReg, 
                          MemWrite, 
                          RegDst, 
                          RegWrite);

    input [9:0] addr;
    input clk;
    input [15:0] din;
    input reset;
    input [0:0] wea;
   output ALUSrc;
   output Branch;
   output [15:0] douta;
   output MemRead;
   output MemtoReg;
   output MemWrite;
   output RegDst;
   output RegWrite;
   
   wire [15:0] douta_DUMMY;
   
   assign douta[15:0] = douta_DUMMY[15:0];
   MIPS_control_unit  XLXI_1 (.CLK(clk), 
                             .Opcode(douta_DUMMY[15:10]), 
                             .Reset(reset), 
                             .ALUSrc(ALUSrc), 
                             .Branch(Branch), 
                             .MemRead(MemRead), 
                             .MemtoReg(MemtoReg), 
                             .MemWrite(MemWrite), 
                             .RegDst(RegDst), 
                             .RegWrite(RegWrite));
   blockmemory16kx1  XLXI_4 (.addra(), 
                            .clka(), 
                            .dina(), 
                            .wea(), 
                            .douta());
endmodule
`timescale 1ns / 1ps

module Step1(ADDR, 
             CLK, 
             RST, 
             WEA, 
             RESULT_OUT);

    input [9:0] ADDR;
    input CLK;
    input RST;
    input [0:0] WEA;
   output [15:0] RESULT_OUT;
   
   wire G;
   wire V;
   wire [15:0] XLXN_9;
   wire [15:0] XLXN_11;
   wire [15:0] XLXN_12;
   
   reg16_MUSER_Step1  MDR (.CLK(CLK), 
                          .I(XLXN_11[15:0]), 
                          .Write(V), 
                          .O(RESULT_OUT[15:0]));
   memory_MUSER_Step1  MemorYY (.addr(ADDR[9:0]), 
                               .clk(CLK), 
                               .din(XLXN_12[15:0]), 
                               .reset(RST), 
                               .wea(WEA[0]), 
                               .ALUSrc(G), 
                               .Branch(G), 
                               .douta(XLXN_11[15:0]), 
                               .MemRead(G), 
                               .MemtoReg(G), 
                               .MemWrite(V), 
                               .RegDst(G), 
                               .RegWrite(G));
   reg16_MUSER_Step1  PC (.CLK(CLK), 
                         .I(), 
                         .Write(G), 
                         .O(XLXN_9[15:0]));
   GND  XLXI_4 (.G(G));
   VCC  XLXI_5 (.P(V));
   mux16b2  XLXI_6 (.I0(XLXN_9[15:0]), 
                   .I1({G, G, G, G, G, G, G, G, G, G, G, G, G, G, G, V}), 
                   .S(V), 
                   .R(XLXN_12[15:0]));
   Clock  XLXI_7 ();
endmodule
